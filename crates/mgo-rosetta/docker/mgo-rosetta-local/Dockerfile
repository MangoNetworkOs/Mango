FROM ubuntu:latest AS chef
WORKDIR mgo
ARG GIT_REVISION
ENV GIT_REVISION=$GIT_REVISION
RUN apt-get update && apt-get install -y build-essential libssl-dev pkg-config curl cmake clang ca-certificates
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Plan out the 3rd-party dependencies that need to be built.
#
# This is done by:
#   1. Copy in Cargo.toml, Cargo.lock, and the workspace-hack crate
#   2. Removing all workspace crates, other than the workpsace-hack
#      crate, from the workspace Cargo.toml file.
#   3. Update the lockfile in order to reflect the changes to the
#      root Cargo.toml file.
# FROM chef AS planner
# COPY Cargo.toml Cargo.lock ./
# COPY crates/workspace-hack crates/workspace-hack
# RUN sed -i '/crates\/workspace-hack/b; /crates/d; /narwhal/d' Cargo.toml \
#     && cargo metadata -q >/dev/null

# Build and cache all dependencies.
#
# In a fresh layer, copy in the "plan" generated by the planner
# and run `cargo build` in order to create a caching Docker layer
# with all dependencies built.
FROM chef AS builder
# COPY --from=planner /mgo/Cargo.toml Cargo.toml
# COPY --from=planner /mgo/Cargo.lock Cargo.lock
# COPY --from=planner /mgo/crates/workspace-hack crates/workspace-hack
# RUN cargo build --release
RUN curl -sSfL https://raw.githubusercontent.com/coinbase/rosetta-cli/master/scripts/install.sh | sh -s

# Build application
#
# Copy in the rest of the crates (and an unmodified Cargo.toml and Cargo.lock)
# and build the application. At this point no dependencies should need to be
# built as they were built and cached by the previous layer.
COPY Cargo.toml Cargo.lock ./
COPY consensus consensus
COPY crates crates
COPY mgo-execution mgo-execution
COPY narwhal narwhal
COPY external-crates external-crates
RUN cargo build --release --bin mgo --bin mgo-rosetta

# Production Image
FROM ubuntu:latest AS runtime
WORKDIR mgo
RUN apt-get update && apt-get install -y ca-certificates
COPY --from=builder /mgo/target/release/mgo /usr/local/bin
COPY --from=builder /mgo/target/release/mgo-rosetta /usr/local/bin
COPY --from=builder /mgo/bin/rosetta-cli /usr/local/bin
COPY --from=builder /mgo/crates/mgo-config/data/fullnode-template.yaml /mgo/devnet/fullnode.yaml
RUN /usr/local/bin/mgo genesis

ARG BUILD_DATE
LABEL build-date=$BUILD_DATE
LABEL git-revision=$GIT_REVISION
